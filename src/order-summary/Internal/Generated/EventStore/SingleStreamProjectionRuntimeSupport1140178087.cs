// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamProjectionLiveAggregation1140178087
    public class SingleStreamProjectionLiveAggregation1140178087 : Marten.Events.Aggregation.SyncLiveAggregatorBase<CoffeeShop.OrderSummary.Models.Order>
    {
        private readonly Marten.Events.Aggregation.SingleStreamProjection<CoffeeShop.OrderSummary.Models.Order> _singleStreamProjection;

        public SingleStreamProjectionLiveAggregation1140178087(Marten.Events.Aggregation.SingleStreamProjection<CoffeeShop.OrderSummary.Models.Order> singleStreamProjection)
        {
            _singleStreamProjection = singleStreamProjection;
        }



        public override CoffeeShop.OrderSummary.Models.Order Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, CoffeeShop.OrderSummary.Models.Order snapshot)
        {
            if (!events.Any()) return snapshot;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public CoffeeShop.OrderSummary.Models.Order Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public CoffeeShop.OrderSummary.Models.Order Apply(Marten.Events.IEvent @event, CoffeeShop.OrderSummary.Models.Order aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderPlaced> event_BaristaOrderPlaced9:
                    aggregate = aggregate.Apply(event_BaristaOrderPlaced9.Data);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderUpdated> event_BaristaOrderUpdated11:
                    aggregate = aggregate.Apply(event_BaristaOrderUpdated11.Data);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderPlaced> event_KitchenOrderPlaced10:
                    aggregate = aggregate.Apply(event_KitchenOrderPlaced10.Data);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderUpdated> event_KitchenOrderUpdated12:
                    aggregate = aggregate.Apply(event_KitchenOrderUpdated12.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamProjectionLiveAggregation1140178087
    
    
    // START: SingleStreamProjectionInlineHandler1140178087
    public class SingleStreamProjectionInlineHandler1140178087 : Marten.Events.Aggregation.AggregationRuntime<CoffeeShop.OrderSummary.Models.Order, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<CoffeeShop.OrderSummary.Models.Order, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Models.Order, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamProjection<CoffeeShop.OrderSummary.Models.Order> _singleStreamProjection;

        public SingleStreamProjectionInlineHandler1140178087(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<CoffeeShop.OrderSummary.Models.Order, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Models.Order, System.Guid> storage, Marten.Events.Aggregation.SingleStreamProjection<CoffeeShop.OrderSummary.Models.Order> singleStreamProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamProjection = singleStreamProjection;
        }



        public override async System.Threading.Tasks.ValueTask<CoffeeShop.OrderSummary.Models.Order> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<CoffeeShop.OrderSummary.Models.Order, System.Guid> slice, Marten.Events.IEvent evt, CoffeeShop.OrderSummary.Models.Order aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderPlaced> event_BaristaOrderPlaced13:
                    aggregate ??= CreateDefault(evt);
                    aggregate = aggregate.Apply(event_BaristaOrderPlaced13.Data);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderUpdated> event_BaristaOrderUpdated15:
                    aggregate ??= CreateDefault(evt);
                    aggregate = aggregate.Apply(event_BaristaOrderUpdated15.Data);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderPlaced> event_KitchenOrderPlaced14:
                    aggregate ??= CreateDefault(evt);
                    aggregate = aggregate.Apply(event_KitchenOrderPlaced14.Data);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderUpdated> event_KitchenOrderUpdated16:
                    aggregate ??= CreateDefault(evt);
                    aggregate = aggregate.Apply(event_KitchenOrderUpdated16.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public CoffeeShop.OrderSummary.Models.Order Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: SingleStreamProjectionInlineHandler1140178087
    
    
}

