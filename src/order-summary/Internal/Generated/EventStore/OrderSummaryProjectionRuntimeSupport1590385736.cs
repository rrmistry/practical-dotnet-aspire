// <auto-generated/>
#pragma warning disable
using CoffeeShop.OrderSummary.Features;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: OrderSummaryProjectionLiveAggregation1590385736
    public class OrderSummaryProjectionLiveAggregation1590385736 : Marten.Events.Aggregation.SyncLiveAggregatorBase<CoffeeShop.OrderSummary.Features.OrderSummaryQuery>
    {
        private readonly CoffeeShop.OrderSummary.Features.OrderSummaryProjection _orderSummaryProjection;

        public OrderSummaryProjectionLiveAggregation1590385736(CoffeeShop.OrderSummary.Features.OrderSummaryProjection orderSummaryProjection)
        {
            _orderSummaryProjection = orderSummaryProjection;
        }



        public override CoffeeShop.OrderSummary.Features.OrderSummaryQuery Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, CoffeeShop.OrderSummary.Features.OrderSummaryQuery snapshot)
        {
            if (!events.Any()) return snapshot;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public CoffeeShop.OrderSummary.Features.OrderSummaryQuery Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public CoffeeShop.OrderSummary.Features.OrderSummaryQuery Apply(Marten.Events.IEvent @event, CoffeeShop.OrderSummary.Features.OrderSummaryQuery aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderPlaced> event_BaristaOrderPlaced1:
                    _orderSummaryProjection.Apply(event_BaristaOrderPlaced1.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderUpdated> event_BaristaOrderUpdated3:
                    _orderSummaryProjection.Apply(event_BaristaOrderUpdated3.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderPlaced> event_KitchenOrderPlaced2:
                    _orderSummaryProjection.Apply(event_KitchenOrderPlaced2.Data, aggregate);
                    break;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderUpdated> event_KitchenOrderUpdated4:
                    _orderSummaryProjection.Apply(event_KitchenOrderUpdated4.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: OrderSummaryProjectionLiveAggregation1590385736
    
    
    // START: OrderSummaryProjectionInlineHandler1590385736
    public class OrderSummaryProjectionInlineHandler1590385736 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid> _storage;
        private readonly CoffeeShop.OrderSummary.Features.OrderSummaryProjection _orderSummaryProjection;

        public OrderSummaryProjectionInlineHandler1590385736(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid> storage, CoffeeShop.OrderSummary.Features.OrderSummaryProjection orderSummaryProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _orderSummaryProjection = orderSummaryProjection;
        }



        public override async System.Threading.Tasks.ValueTask<CoffeeShop.OrderSummary.Features.OrderSummaryQuery> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<CoffeeShop.OrderSummary.Features.OrderSummaryQuery, System.Guid> slice, Marten.Events.IEvent evt, CoffeeShop.OrderSummary.Features.OrderSummaryQuery aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderPlaced> event_BaristaOrderPlaced5:
                    aggregate ??= CreateDefault(evt);
                    _orderSummaryProjection.Apply(event_BaristaOrderPlaced5.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.BaristaOrderUpdated> event_BaristaOrderUpdated7:
                    aggregate ??= CreateDefault(evt);
                    _orderSummaryProjection.Apply(event_BaristaOrderUpdated7.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderPlaced> event_KitchenOrderPlaced6:
                    aggregate ??= CreateDefault(evt);
                    _orderSummaryProjection.Apply(event_KitchenOrderPlaced6.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<CoffeeShop.MessageContracts.KitchenOrderUpdated> event_KitchenOrderUpdated8:
                    aggregate ??= CreateDefault(evt);
                    _orderSummaryProjection.Apply(event_KitchenOrderUpdated8.Data, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public CoffeeShop.OrderSummary.Features.OrderSummaryQuery Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: OrderSummaryProjectionInlineHandler1590385736
    
    
}

